#pragma once
#include <cassert>

#include "xprec/ddouble.hpp"

namespace xprec {

inline DDouble reciprocal_factorial(int n)
{
    static const DDouble RECIPROCAL_FACTORIAL[28] = {
        {0.5, 0.0}, // [0] = 1/2!
        {0.16666666666666666, 9.25185853854297e-18},
        {0.041666666666666664, 2.3129646346357427e-18},
        {0.008333333333333333, 1.1564823173178714e-19},
        {0.001388888888888889, -5.300543954373577e-20},
        {0.0001984126984126984, 1.7209558293420705e-22},
        {2.48015873015873e-5, 2.1511947866775882e-23},
        {2.7557319223985893e-6, -1.858393274046472e-22},
        {2.755731922398589e-7, 2.3767714622250297e-23},
        {2.505210838544172e-8, -1.448814070935912e-24},
        {2.08767569878681e-9, -1.20734505911326e-25},
        {1.6059043836821613e-10, 1.2585294588752098e-26},
        {1.1470745597729725e-11, 2.0655512752830745e-28},
        {7.647163731819816e-13, 7.03872877733453e-30},
        {4.779477332387385e-14, 4.399205485834081e-31},
        {2.8114572543455206e-15, 1.6508842730861433e-31},
        {1.5619206968586225e-16, 1.1910679660273754e-32},
        {8.22063524662433e-18, 2.2141894119604265e-34},
        {4.110317623312165e-19, 1.4412973378659527e-36},
        {1.9572941063391263e-20, -1.3643503830087908e-36},
        {8.896791392450574e-22, -7.911402614872376e-38},
        {3.868170170630684e-23, -8.843177655482344e-40},
        {1.6117375710961184e-24, -3.6846573564509766e-41},
        {6.446950284384474e-26, -1.9330404233703465e-42},
        {2.4795962632247976e-27, -1.2953730964765229e-43},
        {9.183689863795546e-29, 1.4303150396787322e-45},
        {3.279889237069838e-30, 1.5117542744029879e-46},
        {1.1309962886447716e-31, 1.0498015412959506e-47},
    };

    assert((n - 2) * sizeof(DDouble) < sizeof(RECIPROCAL_FACTORIAL));
    if (n <= 1)
        return DDouble(1.0);
    else
        return RECIPROCAL_FACTORIAL[n - 2];
}

} /* namespace xprec */
